#include <iostream>
using namespace std;
//anurag(22BET10069)
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

bool hasCycle(ListNode* head) {
    if (!head || !head->next) return false;

    ListNode* slow = head;
    ListNode* fast = head;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast) return true;
    }

    return false;
}

void createCycle(ListNode* head, int pos) {
    if (pos == -1) return;

    ListNode* temp = head;
    ListNode* cycleNode = NULL;
    int index = 0;

    while (temp->next) {
        if (index == pos) cycleNode = temp;
        temp = temp->next;
        index++;
    }

    temp->next = cycleNode;
}

int main() {
    ListNode* head1 = new ListNode(3);
    head1->next = new ListNode(2);
    head1->next->next = new ListNode(0);
    head1->next->next->next = new ListNode(-4);
    createCycle(head1, 1);
    cout << (hasCycle(head1) ? "true" : "false") << endl;

    ListNode* head2 = new ListNode(1);
    head2->next = new ListNode(2);
    createCycle(head2, 0);
    cout << (hasCycle(head2) ? "true" : "false") << endl;

    ListNode* head3 = new ListNode(1);
    createCycle(head3, -1);
    cout << (hasCycle(head3) ? "true" : "false") << endl;

    return 0;
}
