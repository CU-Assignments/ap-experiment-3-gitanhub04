#include <iostream>
using namespace std;
//anurag(22BET10069)
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

// Function to rotate the linked list to the right by k places
ListNode* rotateRight(ListNode* head, int k) {
    if (!head || !head->next || k == 0) return head;

    ListNode* temp = head;
    int length = 1;
    
    while (temp->next) {
        temp = temp->next;
        length++;
    }

    // Connect the last node to the head to form a circular list
    temp->next = head;
    k = k % length;  // Handle cases where k > length
    int skip = length - k;

    // Move to the new tail
    while (skip--) temp = temp->next;
    
    // Set the new head and break the cycle
    head = temp->next;
    temp->next = nullptr;
    
    return head;
}

// Function to print the linked list
void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

// Function to create a linked list from an array
ListNode* createList(int arr[], int n) {
    if (n == 0) return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* temp = head;
    for (int i = 1; i < n; i++) {
        temp->next = new ListNode(arr[i]);
        temp = temp->next;
    }
    return head;
}

int main() {
    // Example 1
    int arr1[] = {1, 2, 3, 4, 5};
    int k1 = 2;
    ListNode* head1 = createList(arr1, 5);
    head1 = rotateRight(head1, k1);
    printList(head1); // Expected output: 4 5 1 2 3

    // Example 2
    int arr2[] = {0, 1, 2};
    int k2 = 4;
    ListNode* head2 = createList(arr2, 3);
    head2 = rotateRight(head2, k2);
    printList(head2); // Expected output: 2 0 1

    return 0;
}
